syntax = "proto3";

option csharp_namespace = "TaskListKhvatskova";

package taskList;

service tasksList {  
  rpc GetAllTasks (NullRequest) returns (AllTaskReply);
  rpc GetTask (TaskRequest) returns (TaskReply);
  rpc AddTask (TaskRequest) returns (TaskReply);
  rpc UpdateTask (TaskRequest) returns (TaskReply);
  rpc UpdateTaskState (TaskRequest) returns (TaskReply);
  rpc RemoveTask (TaskRequest) returns (TaskReply);

  rpc GetAllExecutors (NullRequest) returns (AllExecutorReply);
  rpc GetExecutor (ExecutorRequest) returns (ExecutorReply);
  rpc AddExecutor (ExecutorRequest) returns (ExecutorReply);
  rpc UpdateExecutor (ExecutorRequest) returns (ExecutorReply);
  rpc RemoveExecutor (ExecutorRequest) returns (ExecutorReply);

  rpc GetAllTags (NullRequest) returns (AllTagReply);
  rpc GetTag (TagRequest) returns (TagReply);
  rpc AddTag (TagRequest) returns (TagReply);
  rpc UpdateTag (TagRequest) returns (TagReply);
  rpc RemoveTag (TagRequest) returns (TagReply);
  rpc RemoveAllTags (NullRequest) returns (NullRequest);
}

message NullRequest { 
  ExaminationReply examination_reply = 1;
}

message TaskRequest {
  int32 TaskId = 1;
  string Name = 2;
  string Description = 3;
  bool TaskState = 4;
  int32 ExecutorId = 5;
  repeated int32 TagsId = 6;
  ExaminationReply examination_reply = 7;
}
message TaskReply {
  int32 TaskId = 1;
  string Name = 2;
  string Description = 3;
  bool TaskState = 4;
  int32 ExecutorId = 5;
  repeated int32 TagsId = 6;
  ExaminationReply examination_reply = 7;
}

message AllTaskReply {
  repeated TaskReply Tasks = 1;
}

message ExecutorReply {
  ExaminationReply examination_reply = 1;
  int32 ExecutorId = 2;
  string Name = 3;
  string Surname = 4;
}

message ExecutorRequest {
  int32 ExecutorId = 1;
  string Name = 2;
  string Surname = 3;
}

message AllExecutorReply {
  repeated ExecutorReply Executors = 1;
}

message TagRequest {
  int32 TagId = 1;
  string Name = 2;
  string Color = 3;
}

message TagReply {
  int32 TagId = 1;
  string Name = 2;
  string Color = 3;
  ExaminationReply examination_reply = 4;
}

message AllTagReply {
  repeated TagReply Tags = 1;
}


message ExaminationReply {
  bool argument_exception = 1;
  bool not_found_exception = 2;
  bool problem = 3;
}



